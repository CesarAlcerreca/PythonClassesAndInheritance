VOWEL_COST = 250
LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
VOWELS = 'AEIOU'

# Write the WOFPlayer class definition (part A) here

class WOFPlayer:
    
    def __init__(self, name):
        self.name = name
        self.prizeMoney = 0
        self.prizes = []
        
    def addMoney(self, amt):
        self.prizeMoney += amt
        
    def goBankrupt(self):
        self.prizeMoney = 0
        
    def addPrize(self, prize):
        self.prizes.append(prize)
        
    def __str__(self):
        return ("{} (${})".format(self.name, self.prizeMoney))
# Write the WOFHumanPlayer class definition (part B) here

class WOFHumanPlayer(WOFPlayer):
    def getMove(self, category, obscured_phrase, guessed):
        str1 = "{} has ${}".format(self.name, self.prizeMoney)
        str2 = ("\n")
        str3 = "Category: {}".format(category)
        str4 = "Phrase: {}".format(obscured_phrase)
        str5 = "Guessed: {}".format(guessed)
        str6 = "Guess a letter, phrase, or type 'exit' or 'pass':"
        return( input(str1+str2+str3+str4+str5+str2+str6))
        

# Write the WOFComputerPlayer class definition (part C) here

class WOFComputerPlayer(WOFPlayer):
    
    SORTED_FREQUENCIES = 'ZQXJKVBPYGFWMUCLDRHSNIOATE'
    
    def __init__(self, name, difficulty):
        self.name = name
        self.prizeMoney = 0
        self.prizes = []
        self.difficulty = difficulty

    def smartCoinFlip(self):
        x = random.randint(1, 10)
        if (self.difficulty < x):
            return True
        else:
            return False
    
    def getPossibleLetters(self, guessed):
        list = []
        if self.prizeMoney >= 250: 
            for l in LETTERS:
                if l not in guessed:
                    list.append(l)
        else:
            for l in LETTERS:
                if l not in VOWELS:
                    if l not in guessed:
                        list.append(l)
        return list

    def getMove(self, category, obscuredPhrase, guessed):
        list = self.getPossibleLetters(guessed)
        FlipResult = self.smartCoinFlip()
        if len(list) == 0:
            return 'pass'
        else:
            if FlipResult==True:
                for l in self.SORTED_FREQUENCIES[::-1]:
                    if l in list:
                        return l
            elif FlipResult==False:
                return random.choice(list)
